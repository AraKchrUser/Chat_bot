import telegram
from telegram.ext import Updater, Filters, MessageHandler, ConversationHandler
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import telegram_bot.map_api as map_api
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
import pandas as pd
from database.entity import *
from database.db_session import *
import csv
import faq_write
from FAQ.model import Faq
import numpy as np
import deeppavlov
from deeppavlov import configs
from deeppavlov.core.common.file import read_json
from deeppavlov.core.commands.infer import build_model
from deeppavlov import configs, train_model
import logging
from passporteye import \
    read_mrz  # –ú–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º–∞—è –∑–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ)

logging.basicConfig(level=logging.ERROR)
global_init("postgre1")
with open('../../token_teleg') as token_file:
    TOKEN = token_file.read().strip()
# user_info = {}


def start(update, context):
    update.message.reply_text(
        "–Ø —á–∞—Ç-–±–æ—Ç ü§ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É –ú–§–¶. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ"\
        " –∫–∞–∫ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è, –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º, —è —Ç–µ–±–µ –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É üòâ ‚úÖ",
        reply_markup=markup
    )


def help(update, context):
    update.message.reply_text("–Ø —á–∞—Ç-–±–æ—Ç ü§ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É –ú–§–¶."
                              " –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ"
                              " –∫–∞–∫ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è, –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º, —è —Ç–µ–±–µ –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É üòâ ‚úÖ")


def echo(update, context):
    update.message.reply_text(update.message.text)


def faq(update, context):
    question = ' '.join(context.args)
    faq = Faq(faq_write.faq_write())
    # faq = Faq('../FAQ/data_faq_mfc.csv')
    faq.train()
    answer = faq.infer(question)[0][0]
    update.message.reply_text(answer)


def define_service(update, context):
    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–Ω–∏—è —É—Å–ª—É–≥–∏
    question = ' '.join(context.args)
    faq = Faq(faq_write.faq_write())
    # faq = Faq('../FAQ/data_faq_mfc.csv')
    faq.train()
    answer = faq.infer(question)[0][0]
    update.message.reply_text(answer)


def news(update, context):
    context.bot.send_photo(
        update.message.chat_id,
        map_api.get_static_api(),
        caption='–í–æ—Ç —Ç–µ–±–µ –∫–∞—Ä—Ç–∞'
    )


def close(update, context):
    update.message.reply_text('ok', reply_markup=ReplyKeyboardRemove())

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def remove_job(name, context):
    current_job = context.job_queue.get_jobs_by_name(name)
    if not current_job:
        return False
    for job in current_job:
        job.schedule_removal()
    return True


def task(context):
    job = context.job
    context.bot.send_message(job.context, text='–í–µ—Ä–Ω—É–ª—Å—è')


def set_timer(update, context):
    chat_id = update.message.chat_id

    try:
        due = int(context.args[0])  # —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–µ—Ä–∞
        if due < 0:
            return 0
        job_removed = remove_job(str(chat_id), context)
        context.job_queue.run_once(task, due, context=chat_id, name=str(chat_id))
        text = f"–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {due} —Å–µ–∫—É–Ω–¥"
        if job_removed:
            text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞'
        update.message.reply_text(text)
    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <—Å–µ–∫>')


def unset_timer(update, context):
    chat_id = update.message.chat_id
    job_removed = remove_job(str(chat_id), context)
    text = '–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª—Å—è —Å–µ–π—á–∞—Å!' if job_removed else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞'
    update.message.reply_text(text)


#  –†–∞–±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
def stop(update, context):
    # Conversion END
    return ConversationHandler.END


def registration(update, context):
    keyboard = telegram.InlineKeyboardMarkup([
        [telegram.InlineKeyboardButton(text='–î–∞', callback_data='–î–∞'),
         telegram.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù–µ—Ç')]
    ])
    update.message.reply_text('–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?',
                              reply_markup=keyboard)
    return 1


def agreement(update, context):
    query = update.callback_query
    query.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')
    query.edit_message_text(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')
    return 2


def disagreement(update, context):
    query = update.callback_query
    query.edit_message_text(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    return ConversationHandler.END


def set_first_name(update, context):
    context.user_data['first_name'] = update.message.text
    update.message.reply_text(f'–•–æ—Ä–æ—à–æ, {context.user_data["first_name"]}, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é')
    return 3


def set_second_name(update, context):
    context.user_data['second_name'] = update.message.text
    update.message.reply_text('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –í–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ... ')
    return 5


def set_passport(update, context):
    pass


def gender(update, context):
    context.user_data['passport'] = update.message.text
    msg = update.message
    msg.delete()
    update.message.reply_text(f'–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã... {context.user_data["passport"]}')
    # –ò–Ω–≤–∞–π—Ç –∫–Ω–æ–ø–∫–∞
    keyboard = telegram.InlineKeyboardMarkup([
        [telegram.InlineKeyboardButton(text='üëß', callback_data='üëß'),
         telegram.InlineKeyboardButton(text='üë®', callback_data='üë®')]
    ])
    update.message.reply_text('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª ',
                              reply_markup=keyboard)
    return 5


def set_girl(update, context):
    context.user_data['gender'] = '–º—É–∂'
    query = update.callback_query
    query.answer('üëß')

    keyboard = telegram.InlineKeyboardMarkup([
        [telegram.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
         telegram.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='–û—Ç–º–µ–Ω–∞')]
    ])
    query.edit_message_text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? ',
                            reply_markup=keyboard)
    return 7


def set_man(update, context):
    context.user_data['gender'] = '–º—É–∂'
    query = update.callback_query
    query.answer('üë®')

    keyboard = telegram.InlineKeyboardMarkup([
        [telegram.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
         telegram.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='–û—Ç–º–µ–Ω–∞')]
    ])
    query.edit_message_text(f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? {context.user_data["gender"]}',
                            reply_markup=keyboard)
    return 7


def save_changes(update, context):
    # add user in db
    query = update.callback_query
    query.edit_message_text(text=f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {[[k, v] for k, v in context.user_data.items()]}')
    return ConversationHandler.END


# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ—Å—Ç—è–Ω–∏—è–º–∏
registration_handler = ConversationHandler(
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–∫–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–µ–Ω–∏–µ)
    entry_points=[CommandHandler('registration', registration)],
    states={
        1: [MessageHandler(Filters.text & ~Filters.command, registration, pass_user_data=True),
            CallbackQueryHandler(agreement, pattern='–î–∞', pass_user_data=True),
            CallbackQueryHandler(disagreement, pattern='–ù–µ—Ç', pass_user_data=True)
            ],
        2: [MessageHandler(Filters.text & ~Filters.command, set_first_name, pass_user_data=True),
            CallbackQueryHandler(agreement, pattern='–î–∞', pass_user_data=True),
            CallbackQueryHandler(disagreement, pattern=' –ù–µ—Ç', pass_user_data=True)
            ],
        3: [MessageHandler(Filters.text & ~Filters.command, set_second_name, pass_user_data=True)],
        4: [MessageHandler(Filters.text & ~Filters.command, set_passport, pass_user_data=True)],
        5: [MessageHandler(Filters.text & ~Filters.command, gender, pass_user_data=True),
            CallbackQueryHandler(set_girl, pattern='^' + 'üëß' + '$', pass_user_data=True),
            CallbackQueryHandler(set_man, pattern='^' + 'üë®' + '$', pass_user_data=True)],
        7: [CallbackQueryHandler(disagreement, pattern='–û—Ç–º–µ–Ω–∞', pass_user_data=True),
            CallbackQueryHandler(save_changes, pattern='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', pass_user_data=True)],

    },
    fallbacks=[CommandHandler('end', stop)]
)


def admission(update, context):
    # –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ì–æ—Ä–æ–¥–æ–≤ –ê–º—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    keyboard = telegram.InlineKeyboardMarkup([
        [telegram.InlineKeyboardButton(text='–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫ üåÜ', callback_data='–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫'),
         telegram.InlineKeyboardButton(text='–®–∏–º–∞–Ω–æ–≤—Å–∫ üåá', callback_data='–®–∏–º–∞–Ω–æ–≤—Å–∫')],
        [telegram.InlineKeyboardButton(text='–°–≤–æ–±–æ–¥–Ω—ã–π üèôÔ∏è', callback_data='–°–≤–æ–±–æ–¥–Ω—ã–π'),
         telegram.InlineKeyboardButton(text='–ë–µ–ª–æ–≥–æ—Ä—Å–∫ üåå', callback_data='–ë–µ–ª–æ–≥–æ—Ä—Å–∫')]
    ])
    update.message.reply_text('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –ê–º—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –≥–¥–µ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ',
                              reply_markup=keyboard)
    return 1


def define_city(update, context):
    query = update.callback_query
    query.edit_message_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {query.data}\n–¢–µ–ø–µ—Ä—å –ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É')
    return 2


def define_service(update, context):
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É –∏ —É–∑–Ω–∞—Ç—å, –ø–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
    update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ú–§–¶')
    db_sess = create_session()

    keyboard = telegram.InlineKeyboardMarkup([[telegram.InlineKeyboardButton(
        text=mfc.address,
        callback_data=mfc.address
    )] for mfc in db_sess.query(MFC).all()])
    update.message.reply_text('–í—ã–±–µ—Ä–∏ –∞–¥—Ä–µ—Å, –≥–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ ',
                              reply_markup=keyboard)
    return 2


def set_mfc(update, context):
    query = update.callback_query
    query.edit_message_text('–ú–§–¶ –≤—ã–±—Ä–∞–Ω–∞ ' + ' ‚úÖ.\n–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞?')
    return 3


def calendar_init(update, context):
    calendar, step = DetailedTelegramCalendar().build()
    if update.message.text.lower() == '–¥–∞':
        context.bot.send_photo(
            update.message.chat_id,
            map_api.get_static_api(),
            caption='–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ú–§–¶'
        )
        update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ {LSTEP[step]}", reply_markup=calendar)
    return 3


def set_admission_date(update, context):
    # send map
    return ConversationHandler.END


def set_calendar_date(update, context):
    query = update.callback_query
    result, key, step = DetailedTelegramCalendar().process(query.data)
    if not result and key:
        query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ {LSTEP[step]}", reply_markup=key)
    elif result:
        # ! -------------------------
        keyboard = telegram.InlineKeyboardMarkup([
            [telegram.InlineKeyboardButton(text='9:30', callback_data='9:30'),
             telegram.InlineKeyboardButton(text='10:30', callback_data='10:30'),
             telegram.InlineKeyboardButton(text='11:30', callback_data='11:30')],
            [telegram.InlineKeyboardButton(text='13:30', callback_data='13:30'),
             telegram.InlineKeyboardButton(text='14:30', callback_data='14:30'),
             telegram.InlineKeyboardButton(text='15:30', callback_data='15:30')]
        ])
        query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {result}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
        return 4
    return 3


def set_time(update, context):
    query = update.callback_query
    query.edit_message_text(query.data)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
    return 5


admission_handler = ConversationHandler(
    entry_points=[CommandHandler('admission', admission)],
    states={
        1: [
            # MessageHandler(Filters.text & ~Filters.command, define_city, pass_user_data=True),
            CallbackQueryHandler(define_city, pass_user_data=True)],
        2: [MessageHandler(Filters.text & ~Filters.command, define_service, pass_user_data=True),
            CallbackQueryHandler(set_mfc, pass_user_data=True)],
        3: [MessageHandler(Filters.text & ~Filters.command, calendar_init, pass_user_data=True),
            CallbackQueryHandler(set_calendar_date, pattern=DetailedTelegramCalendar.func, pass_user_data=True)],
        4: [CallbackQueryHandler(set_time, pattern=r'\d\d.\d\d', pass_user_data=True)],
        5: [
            MessageHandler(Filters.text & ~Filters.command, set_admission_date, pass_user_data=True)
        ]
    },
    fallbacks=[CommandHandler('end', stop)]
)


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("faq", faq, pass_args=True))
    dp.add_handler(CommandHandler("news", news))
    # dp.add_handler(CommandHandler("registration", registration)) –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã ConvertionalHandler
    dp.add_handler(CommandHandler("close", close))
    dp.add_handler(CommandHandler("set", set_timer,
                                  pass_args=True,
                                  pass_job_queue=True,
                                  pass_chat_data=True))
    dp.add_handler(CommandHandler("unset", unset_timer, pass_chat_data=True))
    # dp.add_handler(MessageHandler(Filters.text, echo))  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    dp.add_handler(registration_handler)
    dp.add_handler(admission_handler)

    updater.start_polling()  # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    updater.idle()


if __name__ == "__main__":
    reply_keyboard = [['/admission', '/registration']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)

    main()
